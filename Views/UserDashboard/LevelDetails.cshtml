@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Antiforgery
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor
@model IsmagiLearningApp.Models.Level

@{
    ViewData["Title"] = "Level - " + Model.Title;

    var antiforgeryToken = HttpContextAccessor.HttpContext != null

        ? Antiforgery.GetAndStoreTokens(HttpContextAccessor.HttpContext).RequestToken

        : string.Empty;
}

<div class="container-fluid mt-4">
    <div class="row">
        <!-- Left side - Instructions and Description -->
        <div class="col-md-4">
            <div class="card mb-4">
                <div class="card-header bg-primary text-white">
                    <h4 class="mb-0">@Model.Title</h4>
                </div>
                <div class="card-body">
                    <h5>Description:</h5>
                    <p>@Model.Description</p>

                    <h5 class="mt-4">Task Requirements:</h5>
                    <ul>
                        <li>Language: @Model.ProgrammingLanguage.Name</li>
                        <li>Difficulty: @Model.Difficulty.Name</li>
                    </ul>

                    <div class="alert alert-info mt-4">
                        <h5 class="alert-heading">💡 Hints:</h5>
                        <p class="mb-0">@Model.Hints</p>
                    </div>
                </div>
            </div>

            <!-- Progress Card -->
            @if (ViewBag.Progress != null)
            {
                <div class="card mb-4">
                    <div class="card-header bg-info text-white">
                        <h5 class="mb-0">Your Progress</h5>
                    </div>
                    <div class="card-body">
                        <p>Attempts: @ViewBag.Progress.AttemptCount</p>
                        @if (ViewBag.Progress.IsCompleted)

                        {
                            <div class="alert alert-success">
                                <strong>Completed!</strong>
                                <p class="mb-0">Completed on: @ViewBag.Progress.CompletionDate?.ToString("MMM dd, yyyy")</p>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>

        <!-- Right side - Code Editor and Output -->
        <div class="col-md-8">
            <!-- Code Editor Section -->
            <div class="card mb-4">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Code Editor</h5>
                    <div>
                        <button class="btn btn-primary me-2" onclick="runCode()">
                            <i class="bi bi-play-fill"></i> Run Code
                        </button>
                        <button class="btn btn-success" onclick="submitSolution()">
                            Submit Solution
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    <div id="editor" style="height: 400px; border: 1px solid #ddd; border-radius: 4px;"></div>
                </div>
            </div>

            <!-- Output Section -->
            <div class="card mb-4">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Output</h5>
                    <button class="btn btn-outline-secondary btn-sm" onclick="clearOutput()">
                        Clear Output
                    </button>
                </div>
                <div class="card-body">
                    <pre id="output" class="bg-dark text-light p-3 rounded" style="min-height: 100px;">// Your code output will appear here...</pre>
                </div>
            </div>

            <!-- Test Results -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0">Verification Results</h5>
                </div>
                <div class="card-body">
                    <div id="verificationResults">
                        <!-- Results will be displayed here -->
                    </div>
                </div>
            </div>

            <!-- Solution Section (Hidden by default) -->
            <div id="solutionSection" class="card mb-4" style="display: none;">
                <div class="card-header bg-warning">
                    <h5 class="mb-0">Solution Reference</h5>
                </div>
                <div class="card-body">
                    <p class="text-muted mb-3">Here's one way to solve this challenge:</p>
                    <pre id="solution" class="bg-light p-3 rounded">@Model.ExpectedSolution</pre>
                </div>
            </div>
            <!-- Next Level Button (Hidden by default) -->
            <div id="nextLevelButton" class="text-center mb-4">
                <a asp-action="LevelDetails"
                   asp-route-levelId="@(Model.Id + 1)"
                   class="btn btn-lg btn-success">
                    Continue to Next Level
                    <i class="bi bi-arrow-right"></i>
                </a>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.44.0/min/vs/loader.min.js"></script>
    <script>
        let editor;
        let runAttempts = 0;
        const maxAttempts = 3;

        function getLowerCaseLanguage(ProgrammingLanguage) {
            // Convert language name to lowercase and handle common variations
            const lang = ProgrammingLanguage.toLowerCase().trim();

            switch (lang) {
                case 'javascript':
                case 'js':
                    return 'javascript';
                case 'python':
                case 'py':
                    return 'python';
                case 'php':
                    return 'php';
                case 'html':
                    return 'html';
                case 'css':
                    return 'css';
                case 'java':
                    return 'java';
                case 'c#':
                case 'csharp':
                    return 'csharp';
                case 'cpp':
                case 'c++':
                    return 'cpp';
                case 'typescript':
                case 'ts':
                    return 'typescript';
                case 'ruby':
                    return 'ruby';
                default:
                    return 'plaintext';
            }
        }

        // Update the Monaco editor initialization:
        require.config({ paths: { vs: 'https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.44.0/min/vs' } });
        require(['vs/editor/editor.main'], function () {
            editor = monaco.editor.create(document.getElementById('editor'), {
                value: `@Html.Raw(Model.InitialCode.Replace("\n", "\\n").Replace("\r", "\\r").Replace("\"", "\\\""))`,
                language: getLowerCaseLanguage('@Model.ProgrammingLanguage.Name'),
                theme: 'vs-dark',
                minimap: { enabled: false },
                automaticLayout: true,
                fontSize: 14,
                lineNumbers: 'on',
                scrollBeyondLastLine: false,
                wordWrap: 'on',
                automaticLayout: true,
                formatOnType: true,
                formatOnPaste: true,
                tabSize: 4,
                autoIndent: true
            });
        });
        // Add these functions at the top of your script section
        function codeToRegexPattern(code) {
            return code
                // Remove whitespace differences
                .trim()
                .replace(/\s+/g, '\\s*')
                // Escape special characters
                .replace(/[.*+?^${}()|[\]\\]/g, '\\$&')
                // Make variable names flexible
                .replace(/\blet\b/g, '(?:let|var|const)')
                // Allow flexible function declarations
                .replace(/\bfunction\b/g, '(?:function|const|let|var)?')
                // Make semicolons optional
                .replace(/;/g, ';?')
                // Allow flexible spacing around operators
                .replace(/([=+\-*/%<>!&|])/g, '\\s*$1\\s*');
        }

        // Update your submitSolution function
        function submitSolution() {
            const code = editor.getValue();
            const verificationResults = document.getElementById('verificationResults');
            const nextLevelButton = document.getElementById('nextLevelButton');

            try {
                const userCode = code.trim();
                const expectedSolution = `@Html.Raw(Model.ExpectedSolution.Replace("\n", "\\n").Replace("\r", "\\r").Replace("\"", "\\\""))`.trim();

                // Convert both codes to regex patterns
                const userPattern = codeToRegexPattern(userCode);
                const solutionPattern = codeToRegexPattern(expectedSolution);

                // Create RegExp objects
                const userRegex = new RegExp(userPattern, 'i');
                const solutionRegex = new RegExp(solutionPattern, 'i');

                // Check if either pattern matches the other code
                const isCorrect = userRegex.test(expectedSolution) || solutionRegex.test(userCode);

                runAttempts++;

                if (isCorrect) {
                    verificationResults.innerHTML = `
                        <div class="alert alert-success">
                            <strong>Congratulations!</strong> Your solution is correct!
                        </div>`;
                    saveProgress(true);
                    // Show the next level button
                    nextLevelButton.style.display = 'block';
                } else {
                    verificationResults.innerHTML = `
                        <div class="alert alert-warning">
                            <strong>Not quite right.</strong> Try again! (Attempt ${runAttempts} of ${maxAttempts})
                        </div>`;
                    saveProgress(false);

                    if (runAttempts >= maxAttempts) {
                        document.getElementById('solutionSection').style.display = 'block';
                    }
                }
            } catch (error) {
                verificationResults.innerHTML = `
                    <div class="alert alert-danger">
                        <strong>Error:</strong> ${error.message}
                    </div>`;
            }
        }

        function getLowerCaseLanguage(language) {
            return language.toLowerCase() === 'javascript' ? 'javascript' : 'plaintext';
        }

        function runCode() {
            const code = editor.getValue();
            const outputElement = document.getElementById('output');

            // Clear previous output
            outputElement.textContent = '';

            try {
                // Capture console.log output
                const logs = [];
                const originalLog = console.log;
                console.log = (...args) => {
                    logs.push(args.join(' '));
                    originalLog.apply(console, args);
                };

                // Run the code
                eval(code);

                // Restore original console.log
                console.log = originalLog;

                // Display output
                outputElement.textContent = logs.join('\n') || '// No output';
                outputElement.className = 'bg-dark text-light p-3 rounded';
            } catch (error) {
                outputElement.textContent = `Error: ${error.message}`;
                outputElement.className = 'bg-danger text-light p-3 rounded';
            }
        }

        function submitSolution() {
            const code = editor.getValue();
            const verificationResults = document.getElementById('verificationResults');

            try {
                // Compare with expected solution
                const userCode = code.trim();
                const expectedSolution = `@Html.Raw(Model.ExpectedSolution.Replace("\n", "\\n").Replace("\r", "\\r").Replace("\"", "\\\""))`.trim();

                // Simple comparison (you might want to make this more sophisticated)
                const isCorrect = userCode === expectedSolution;

                runAttempts++;

                if (isCorrect) {
                    verificationResults.innerHTML = `
                                <div class="alert alert-success">
                                    <strong>Congratulations!</strong> Your solution is correct!
                                </div>`;
                    saveProgress(true);
                } else {
                    verificationResults.innerHTML = `
                                <div class="alert alert-warning">
                                    <strong>Not quite right.</strong> Try again! (Attempt ${runAttempts} of ${maxAttempts})
                                </div>`;
                    saveProgress(false);

                    if (runAttempts >= maxAttempts) {
                        document.getElementById('solutionSection').style.display = 'block';
                    }
                }
            } catch (error) {
                verificationResults.innerHTML = `
                            <div class="alert alert-danger">
                                <strong>Error:</strong> ${error.message}
                            </div>`;
            }
        }
        // Add this to your existing JavaScript
        function goToNextLevel() {
            fetch(`/UserDashboard/GetNextLevel?currentLevelId=@Model.Id`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        if (data.hasNextLevel) {
                            window.location.href = `/UserDashboard/LevelDetails/${data.nextLevelId}`;
                        } else {
                            // Show completion message
                            Swal.fire({
                                title: 'Congratulations!',
                                text: 'You\'ve completed all available levels!',
                                icon: 'success',
                                confirmButtonText: 'Return to Dashboard'
                            }).then((result) => {
                                if (result.isConfirmed) {
                                    window.location.href = '/UserDashboard';
                                }
                            });
                        }
                    }
                })
                .catch(error => console.error('Error:', error));
        }

        // Update the next level button to use this function
        document.getElementById('nextLevelButton').onclick = goToNextLevel;
        function saveProgress(isCompleted) {
            fetch('/UserDashboard/SaveProgress', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': '@antiforgeryToken'
                },
                body: JSON.stringify({
                    levelId: @Model.Id,
                    isCompleted: isCompleted,
                    code: editor.getValue()
                })
            });
        }

        function clearOutput() {
            document.getElementById('output').textContent = '// Your code output will appear here...';
        }
    </script>
}