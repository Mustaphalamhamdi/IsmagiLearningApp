@model Level

@section Styles {
    <style>
        #editorContainer {
            height: 500px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }

        .output-container {
            background-color: #1e1e1e;
            color: #fff;
            padding: 15px;
            border-radius: 4px;
            margin-top: 15px;
            min-height: 100px;
            font-family: monospace;
        }
    </style>
}

<div class="container mt-4">
    <div class="row">
        <!-- Instructions Panel -->
        <div class="col-md-4">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">@Model.Title</h5>
                </div>
                <div class="card-body">
                    <h6>Description:</h6>
                    <p>@Model.Description</p>

                    <h6 class="mt-4">Hints:</h6>
                    <p>@Model.Hints</p>

                    <div class="alert alert-info mt-3">
                        <small>
                            <i class="bi bi-info-circle"></i>
                            Press Ctrl + Space for code suggestions
                        </small>
                    </div>
                </div>
            </div>
        </div>

        <!-- Code Editor Panel -->
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">Code Editor</h5>
                        <div>
                            <button class="btn btn-primary me-2" onclick="runCode()">
                                <i class="bi bi-play-fill"></i> Run
                            </button>
                            <button class="btn btn-success" onclick="submitSolution()">
                                <i class="bi bi-check-lg"></i> Submit
                            </button>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <div id="editorContainer"></div>
                    <div class="output-container">
                        <div class="d-flex justify-content-between mb-2">
                            <h6 class="text-light mb-0">Output:</h6>
                            <button class="btn btn-sm btn-outline-light" onclick="clearOutput()">
                                Clear
                            </button>
                        </div>
                        <pre id="outputArea" class="mb-0"></pre>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.44.0/min/vs/loader.min.js"></script>
    <script>
        let editor;
        let outputArea;

        // Initialize Monaco Editor when the page loads
        require.config({ paths: { vs: 'https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.44.0/min/vs' } });

        require(['vs/editor/editor.main'], function () {
            // Create the editor with your initial code
            editor = monaco.editor.create(document.getElementById('editorContainer'), {
                value: `@Html.Raw(Model.InitialCode)`,
                language: '@Model.ProgrammingLanguage.Name.ToLower()',
                theme: 'vs-dark',
                minimap: { enabled: false },
                automaticLayout: true,
                fontSize: 14,
                lineNumbers: 'on',
                scrollBeyondLastLine: false,
                roundedSelection: false,
                renderLineHighlight: 'all',
                rulers: [80],
                wordWrap: 'on'
            });

            // Add keyboard shortcuts for running code
            editor.addCommand(monaco.KeyMod.CtrlCmd | monaco.KeyCode.Enter, runCode);
        });

        // Function to run the code
        async function runCode() {
            const outputArea = document.getElementById('outputArea');
            const code = editor.getValue();

            try {
                // Capture console.log output
                const originalLog = console.log;
                let output = [];

                console.log = (...args) => {
                    output.push(args.join(' '));
                    originalLog.apply(console, args);
                };

                // Run the code
                eval(code);

                // Restore console.log
                console.log = originalLog;

                // Display output
                outputArea.textContent = output.join('\n');
                outputArea.style.color = '#4CAF50';
            } catch (error) {
                outputArea.textContent = `Error: ${error.message}`;
                outputArea.style.color = '#f44336';
            }
        }

        // Function to clear the output area
        function clearOutput() {
            document.getElementById('outputArea').textContent = '';
        }

        // Function to submit the solution
        async function submitSolution() {
            const code = editor.getValue();

            try {
                const response = await fetch('/Level/CheckSolution', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({
                        levelId: @Model.Id,
                        solution: code
                    })
                });

                const result = await response.json();

                if (result.isCorrect) {
                    Swal.fire({
                        title: 'Congratulations!',
                        text: 'Your solution is correct!',
                        icon: 'success'
                    }).then(() => {
                        location.reload();
                    });
                } else {
                    Swal.fire({
                        title: 'Not quite right',
                        text: `Keep trying! ${result.showSolution ? 'You can view the solution after a few more attempts.' : ''}`,
                        icon: 'warning'
                    });
                }
            } catch (error) {
                Swal.fire({
                    title: 'Error',
                    text: 'Something went wrong. Please try again.',
                    icon: 'error'
                });
            }
        }
    </script>
}